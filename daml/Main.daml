module Main where

type LoanId = ContractId Loan

data LoanDetails = LoanDetails with
        banker: Party
        customer: Party
        amount: Decimal
        incomePerYear: Optional Decimal
        existingCustomer: Bool
            deriving (Eq, Show)

template HomeLoanApplication
    with
        banker: Party
        customer: Party
        amount: Decimal
        incomePerYear: Optional Decimal
        existingCustomer: Bool
    where
        signatory customer
        observer banker
    
        key(customer, banker): (Party, Party)
        maintainer key._1

        ensure amount > 0.0                    -- Ensure loan amount is greater than zero

        choice ApproveLoan: LoanId
            with
                banker: Party
            controller banker
            do
                if existingCustomer then do
                    create Loan with
                        details = LoanDetails with
                            banker = banker
                            amount = amount
                            customer = customer
                            incomePerYear = incomePerYear
                            existingCustomer = True
                else do
                    create Loan with
                        details = LoanDetails with
                            banker = banker
                            amount = amount
                            customer = customer
                            incomePerYear = incomePerYear
                            existingCustomer = False
        choice RejectLoan: ()
            with
                banker: Party
            controller banker
            do
                assertMsg "Authoriser must be bank" (banker == banker)
                return ()
        
template Loan
    with
        details: LoanDetails
    where
        signatory details.banker, details.customer
        observer details.banker

        ensure details.amount > 0.0             -- Ensure loan amount is greater than zero

        choice PayLoan: ()
            controller details.customer
            do
                return ()
        
        nonconsuming choice ModifyLoan: LoanId
            with
                newAmount: Decimal
            controller details.banker
            do
                assertMsg" New amount must be different from original amount"(newAmount /= details.amount)
                archive self
                create this with
                    details = details with
                        amount = newAmount
    